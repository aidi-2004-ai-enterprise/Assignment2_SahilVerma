name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: us-east1
  REPOSITORY: ml-pipeline-repo
  SERVICE: ml-pipeline-service
  REGION: us-east1

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Install dependencies
      run: |
        uv sync --dev

    - name: Run unit tests with coverage
      run: |
        uv run pytest --cov=app tests/ --cov-report=xml --cov-report=term-missing
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    name: Code Quality
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Install dependencies
      run: |
        uv sync --dev

    - name: Run linting
      run: |
        uv run ruff check app/ tests/ || true
        uv run black --check app/ tests/ || true

  build:
    needs: [test, lint]
    runs-on: ubuntu-latest
    name: Build Docker Image
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/ml-pipeline-app
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm -d -p 8080:8080 --name test-container \
          -e GCS_BUCKET_NAME= \
          ${{ steps.meta.outputs.tags | head -1 }}
        
        # Wait for container to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8080/ || (docker logs test-container && exit 1)
        
        # Test prediction endpoint
        curl -X POST "http://localhost:8080/predict" \
          -H "Content-Type: application/json" \
          -d '{"bill_length_mm": 39.1, "bill_depth_mm": 18.7, "flipper_length_mm": 181, "body_mass_g": 3750, "year": 2007, "sex": "male", "island": "Torgersen"}' \
          || (docker logs test-container && exit 1)
        
        docker stop test-container

  deploy:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [build]
    runs-on: ubuntu-latest
    name: Deploy to Cloud Run
    
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Google Auth
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker to use gcloud as a credential helper
      run: |
        gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

    - name: Build and Push Container
      run: |
        docker build -t ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/ml-pipeline-app:${{ github.sha }} .
        docker push ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/ml-pipeline-app:${{ github.sha }}

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy ${{ env.SERVICE }} \
          --image ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/ml-pipeline-app:${{ github.sha }} \
          --platform managed \
          --region ${{ env.REGION }} \
          --allow-unauthenticated \
          --port 8080 \
          --memory 1Gi \
          --cpu 1 \
          --set-env-vars GCS_BUCKET_NAME=${{ secrets.GCS_BUCKET_NAME }}

    - name: Show service URL
      run: |
        gcloud run services describe ${{ env.SERVICE }} \
          --platform managed \
          --region ${{ env.REGION }} \
          --format 'value(status.url)'

  load-test:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [deploy]
    runs-on: ubuntu-latest
    name: Load Testing
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Install dependencies
      run: |
        uv sync

    - name: Get service URL
      run: |
        echo "SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE }} \
          --platform managed \
          --region ${{ env.REGION }} \
          --format 'value(status.url)')" >> $GITHUB_ENV

    - name: Run load tests
      run: |
        uv run locust -f locustfile_gui.py --headless \
          --users 10 --spawn-rate 2 --run-time 60s \
          --host ${{ env.SERVICE_URL }} \
          --html load-test-report.html
      continue-on-error: true

    - name: Upload load test results
      uses: actions/upload-artifact@v4
      with:
        name: load-test-report
        path: load-test-report.html