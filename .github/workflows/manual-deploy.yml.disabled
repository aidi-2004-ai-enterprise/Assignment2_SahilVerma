name: Manual Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      run_tests:
        description: 'Run tests before deployment'
        required: true
        type: boolean
        default: true
      run_load_tests:
        description: 'Run load tests after deployment'
        required: true
        type: boolean
        default: false

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: us-east1
  REPOSITORY: ml-pipeline-repo
  SERVICE: ml-pipeline-service-${{ github.event.inputs.environment }}
  REGION: us-east1

jobs:
  test:
    if: github.event.inputs.run_tests == 'true'
    runs-on: ubuntu-latest
    name: Pre-deployment Tests
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Install dependencies
      run: |
        uv sync --dev

    - name: Run tests
      run: |
        uv run pytest --cov=app tests/ --cov-report=term-missing

    - name: Build and test Docker image
      run: |
        docker build -t ml-pipeline-app:manual-test .
        docker run -d -p 8080:8080 --name manual-test \
          -e GCS_BUCKET_NAME= \
          ml-pipeline-app:manual-test
        sleep 10
        curl -f http://localhost:8080/
        docker stop manual-test && docker rm manual-test

  deploy:
    if: always() && (needs.test.result == 'success' || github.event.inputs.run_tests == 'false')
    needs: [test]
    runs-on: ubuntu-latest
    name: Manual Deployment
    
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Google Auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker
      run: |
        gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

    - name: Build and Push
      run: |
        IMAGE_TAG=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/ml-pipeline-app:manual-${{ github.run_number }}
        docker build -t $IMAGE_TAG .
        docker push $IMAGE_TAG

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy ${{ env.SERVICE }} \
          --image ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/ml-pipeline-app:manual-${{ github.run_number }} \
          --platform managed \
          --region ${{ env.REGION }} \
          --allow-unauthenticated \
          --port 8080 \
          --memory 1Gi \
          --cpu 1 \
          --set-env-vars GCS_BUCKET_NAME=${{ secrets.GCS_BUCKET_NAME }}

    - name: Get service URL
      id: url
      run: |
        URL=$(gcloud run services describe ${{ env.SERVICE }} \
          --platform managed \
          --region ${{ env.REGION }} \
          --format 'value(status.url)')
        echo "SERVICE_URL=$URL" >> $GITHUB_OUTPUT
        echo "::notice title=Deployment Success::Service deployed to $URL"

    - name: Verify deployment
      run: |
        sleep 30
        curl -f ${{ steps.url.outputs.SERVICE_URL }}/
        curl -X POST "${{ steps.url.outputs.SERVICE_URL }}/predict" \
          -H "Content-Type: application/json" \
          -d '{"bill_length_mm": 39.1, "bill_depth_mm": 18.7, "flipper_length_mm": 181, "body_mass_g": 3750, "year": 2007, "sex": "male", "island": "Torgersen"}'

  load-test:
    if: github.event.inputs.run_load_tests == 'true' && needs.deploy.result == 'success'
    needs: [deploy]
    runs-on: ubuntu-latest
    name: Post-deployment Load Test
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Install dependencies
      run: |
        uv sync

    - name: Google Auth (for service URL)
      uses: google-github-actions/auth@v2
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Get service URL and run load test
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE }} \
          --platform managed \
          --region ${{ env.REGION }} \
          --format 'value(status.url)')
        
        uv run locust -f locustfile_gui.py --headless \
          --users 10 --spawn-rate 2 --run-time 120s \
          --host $SERVICE_URL \
          --html manual-load-test-report.html

    - name: Upload load test results
      uses: actions/upload-artifact@v4
      with:
        name: manual-load-test-report-${{ github.event.inputs.environment }}
        path: manual-load-test-report.html